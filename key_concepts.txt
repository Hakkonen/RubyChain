What? 
    A blockchain is a, generally, publically accessible database consisting of 'blocks', and are kept secure by network participation. In essense a blockchain is a linked list that utilises computational power and democratic participation to keep the network safe.

How?
    I will construct a rudimentary blockchain using the Ruby language.

What is a hash function?
    A hash function is a function that receives as input a string of any length, and returns a string of fixed length that looks random, but isn't. Each string has it's own output hash that is alwasy the same, correlating specifically to it's input value.

    The SHA256 encryption method is used to take in the input string, and return a seemingly random string as an output. The output is a random alphanumeric sequence which is always equivilant to the input, however the key is that even changing one letter in the input string will return an entirely different output SHA256 string. Because of this it is (as of today, anyway) impossible to reverse-engineer the input sequence to any SHA256 output string.

    Hash functions are absolutely integral to the function of a blockchain network, they not only serve as addresses for token wallets, but allow the blockchain network to perform 'mining' functions, which we will epxlore breifly.

What's a block?
    A block contains three components: the block's Data, the current Hash, and the previous Hash.

    It's almost impossible to change block data once it's written to the chain because every block references the previous block. Because the hash is based off of the data inside each block, if we change one blocks data the hash has to change, and therefor subsequently if we modify blocks in the chain, all subsequent blocks must have their hashes updated. Not only does it require an inordinate amount of computational power to rewrite hashes, the democratic consensus of the network will see the modified chain is different to the majority of agreed-upon chains and will ignore the newly modified malicious chain.

    The data structure of a block in psuedocode looks like:
        class Block():
            def __init__(self, data, previous_hash)
                self.data = data
                self.previous_hash = previous_hash
                self.hash = sha256(self.to_string().endode()).hexdigest()
            
            def to_string(self)
                return "{0}\t{1}.format(self.data, self.previous_hash)
    
    Every blockchain must have a first block, which is called the genesis block. This block will have a hash that point to a null hash as its previous block.

Proof of work.
    AS we discussed with hash functions, they are very easy to generate but impossibly difficult to reverse. There is no other way to reverse a SHA256 string other than to use brute force computation to guess the input string. It takes 2^256 guesses to correctly guess the input string, which is such an unfathohmably high number that it is difficult to humanly comprehend. 

    As a secure method for stopping imposters from modifying the blockchain, each block's hash must lead with X numer of zeroes. The amount of leading zeroes determines how difficult it is to create a new hash. For example, if we define that for a block to be valid on our chain it must lead with four "0"s, we must find a new hash that takes as input the new block's data and return a hash with four "0"s as a return string. 

    The fundamental concept of proof-of-work blockchains are very simple: exchange computational power for security. Because it requires so much effort for a single computer to create a new hash, it creates a reliance on a network of distributed computational power.

    In order to make attempts at hashing different from one another we use a number called the 'nonce'.

A note on why SHA256 works:
    Think about a simple mathematical equation:
        100 + 100 = 200
    Now imagine that we did not know what the input was to achieve our output of 200. This is the fundamental logic behind a one-way hash. It creates an output that has too many possible combinations to reverse. 

How a bitcoin hash wallet works:
    Bitcoin style hash wallets work because the user has access to the "private" keys, which when put through a one-way encryption algorithm will generate a "private" key. Because the network only sees transactions from "public" to "public" hash keys, any wallet can be seen but not transacted from. 

Construction of a classic BTC block:
    Field	Size (Bytes)	Comments
    version	4 byte	        Block version number
    prev	32 byte	256-bit hash of the previous block header
    merkle	32 byte	256-bit hash of all transactions in the block
    time	4 bytes	        Current timestamp as seconds since 1970-01-01 00:00
    bits	4 bytes	        Current difficulty target in compact binary format
    nonce	4 bytes	32-bit  Number of the (mined) lucky lottery number used once

    Genesis block example:
    version    = 1
prev       = '0000000000000000000000000000000000000000000000000000000000000000'
merkleroot = '4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b'
    time       = 1231006505
    bits       = '1d00ffff'
    nonce      = 2083236893

EXAMPLE RUNNING OF A BLOCKCHAIN
    Blockchain flow:
        1. Generate genesis block
        2. Begin mining / generating blocks
        3. When a block is generated the block will draw merkle tree data from the ledger

    Transaction flow:
        1. The ledger is generated
        2. Money is kept in the ledger by hash to hash transactions
            a. a16ef10 has 2 RubyCoin
            b. a16ef10 -> 1 RubyCoin -> b15a11
            c. a16ef10 has 1 RubyCoin
            d. b15a11 has 1 RubyCoin
        3. When a new block is mined the merkle root of all transactions is committed 

Endianness and the block hash:
    Endianness is the sequencing of data in a string of bits from either most significant bit at the start of the byte, or the least significant bit at the start of the byte. The choice between the two offer no real significant advantages, and comes down the the programmer's choice at the point of creation. However, Bitcoin creator's Satoshi Nakamoto chose to use little-endianness for speed, so I will be utilising their method.

    The significance of utilising endianness in this program (or Bitcoin's) comes down to the compression of block hash data into an 80-byte string. This string consists of six components of variang length:
        1. Version (4 bytes )
        2. Previous Hash ( 32 bytes / 256-bit hash )
        3. Merkle Root ( 32 bytes / 256-bit hash )
        4. Time ( 4 bytes )
        5. Bits ( 4 bytes )
        6. Nonce ( 4 bytes )
    The final binary string is then fed into the SHA256 algorithm which will provide the blocks final hash output.